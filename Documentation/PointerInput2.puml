@startuml

note "This state machine takes advantage of the UML state machine rules regarding\nsubmachines and transition priorities. For more details: \n http://www.boost.org/doc/libs/1_55_0/libs/msm/doc/HTML/ch02s02.html#d0e226 \n\nAlso observe the output of running StateMachineTests and StateMachine2Tests\nto gain a better understanding of these rules" as N1

[*] --> Idle

Idle --> HasTarget: *Any* [IsAtopControl]

Retarget --> HasTarget: [IsAtopControl]
Retarget --> Idle: [!IsAtopControl]
HasTarget -u-> Retarget: *Any* [!IsAtopTarget]

state HasTarget: enter: SetTargetToAtopControl
state HasTarget: leave: SetTargetToNothing

state HasTarget {
    [*] --> HasEnabled : [TargetIsEnabled]
    [*] --> HasDisabled: [!TargetIsEnabled]

    state HasEnabled {
        [*] --> HasAvailable: [!TargetIsBusy]
        [*] --> HasBusy: [TargetIsBusy]

        state HasAvailable: enter: NotifyBusy && NotifyEnter
        state HasAvailable: leave: NotifyLeave && NotifyAvailable
        state HasAvailable {
            [*] -> Pending

            Pending --> Pending: Move [IsAtopTarget] / NotifyMove
            Pending --> Engaged: Down / \n NotifyDown

            Engaged --> Engaged: Move [IsAtopTarget] / NotifyMove
            Engaged --> Pending: Up / \n NotifyUp
            Engaged --> EngagedRemotely: Move [!IsAtopTarget] / \n NotifyEngagedEscape

            EngagedRemotely --> Engaged: Move [IsAtopTarget] / \n NotifyEngagedReturn
            EngagedRemotely --> EngagedRemotely: Move [!IsAtopTarget] / NotifyMove
        }
    }

    HasDisabled --> HasEnabled: TargetBecameEnabled
    HasEnabled -l-> HasDisabled: TargetBecameDisabled
}



@enduml