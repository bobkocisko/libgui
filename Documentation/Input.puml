@startuml

note "This state machine takes advantage of the UML state machine rules regarding\nsubmachines and transition priorities. For more details: \n http://www.boost.org/doc/libs/1_55_0/libs/msm/doc/HTML/ch02s02.html#d0e226 \n\nAlso observe the output of running StateMachineTests and StateMachine2Tests\nto gain a better understanding of these rules\n\nAlso, note that boost msm's implementation of *Any* events also is invoked \nif the state machine uses any anonymous transitions so a special guard has \nto be used to avoid this" as N1

[*] --> Idle

Idle --> HasTarget: *Any* [!EventTypeIsAnonymous && \n IsAtopControl]

Retarget --> HasTarget: [IsAtopControl]
Retarget --> Idle: [!IsAtopControl]
HasTarget -u-> Retarget: *Any* [!EventTypeIsAnonymous && \n !IsAtopTarget]

state HasTarget: enter: SetTargetToAtopControl
state HasTarget: leave: SetTargetToNothing

state HasTarget {
    [*] -> DecideTargetIsEnabled
    DecideTargetIsEnabled --> HasEnabled : [TargetIsEnabled]
    DecideTargetIsEnabled --> HasDisabled: [!TargetIsEnabled]

    state HasEnabled {
        [*] -> DecideTargetIsBusy
        DecideTargetIsBusy --> HasAvailable: [!TargetIsBusy]
        DecideTargetIsBusy --> HasBusy: [TargetIsBusy]

        state HasAvailable: enter: NotifyBusy; NotifyEnter
        state HasAvailable: leave: (evt is Up ? NotifyUp); NotifyLeave; NotifyAvailable
        state HasAvailable {
            [*] -> DecideEventType
                DecideEventType -> Pending: [!EventTypeIsDown]
                DecideEventType --> Engaged: [EventTypeIsDown] / \n NotifyDown

                Pending --> Pending: Move [IsAtopTarget] / NotifyMove
                Pending --> Engaged: Down / \n NotifyDown

                Engaged --> Engaged: Move [IsAtopTarget] / NotifyMove
                Engaged --> Pending: Up [IsPointer] / \n NotifyUp
                Engaged --> EngagedRemotely: Move [!IsAtopTarget] / \n NotifyEngagedEscape

                EngagedRemotely --> Engaged: Move [IsAtopTarget] / \n NotifyEngagedReturn
                EngagedRemotely --> EngagedRemotely: Move [!IsAtopTarget] / NotifyMove
            }
        }
    }

    HasDisabled --> HasEnabled: TargetBecameEnabled
    HasEnabled -l-> HasDisabled: TargetBecameDisabled \n [IsAtopTarget]
}



@enduml